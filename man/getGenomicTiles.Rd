% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getGenomicTiles.R
\name{getGenomicTiles}
\alias{getGenomicTiles}
\title{Get regions tiling a genome.}
\usage{
getGenomicTiles(
  genome,
  tileWidth,
  hasOverlap = list(),
  fracOverlap = list(),
  numOverlap = list(),
  nearest = list(),
  addSeqComp = TRUE
)
}
\arguments{
\item{genome}{The genome to work on. Either a \code{\link[BSgenome]{BSgenome}}
object, a \code{character} scalar with the name of an installed \code{\link[BSgenome]{BSgenome}}
or with a file path and name pointing to a fasta file with the genome sequence,
or a named \code{numeric} vector giving the names and lengths of chromosomes.}

\item{tileWidth}{\code{numeric} scalar with the tile length.}

\item{hasOverlap}{Named \code{list} with \code{\link[GenomicRanges]{GRanges}} object(s).
For each list element, a logical vector "X.hasOverlap" will be added to the
\code{mcols} of the result, with \code{TRUE} for each tile that overlaps
any region in that element. "X" is obtained from \code{names(hasOverlap)}.}

\item{fracOverlap}{Named \code{list} with \code{\link[GenomicRanges]{GRanges}} object(s).
For each list element, a numeric vector "X.fracOverlap" will be added to the
\code{mcols} of the result, with a value between 0 and 1 giving the fraction
of bases in a tile that overlaps with any region in that element. "X" is
obtained from \code{names(fracOverlap)}.}

\item{numOverlap}{Named \code{list} with \code{\link[GenomicRanges]{GRanges}} object(s).
For each list element, two numeric vectors "X.numOverlapWithin" and
"X.numOverlapAny" will be added to the \code{mcols} of the result, giving
the number of ranges in that element that are fully contained within
a tile, or that overlap with a tile in any way, respectively. "X" is
obtained from \code{names(numOverlap)}.}

\item{nearest}{Named \code{list} with \code{\link[GenomicRanges]{GRanges}} object(s).
For each list element, two numeric vectors "X.nearestName" and
"X.nearestDistance" will be added to the \code{mcols} of the result, giving
the name and distance of the nearest range in that element for each tile. "X" is
obtained from \code{names(nearest)}, and the values of "X.nearestName" from
\code{names(nearest$X)}.}

\item{addSeqComp}{\code{logical} scalar. If \code{TRUE} and primary sequence
can be obtained from \code{genome}, also add sequence composition features
for each tile to the annotations. Currently, the following features are
included: percent of G+C bases ("percGC"), CpG observed-over-expected ratio
("CpGoe").}
}
\value{
A \code{\link[GenomicRanges]{GRanges}} object with genome tiling regions.
    Optional tile annotations are contained in its metadata columns (\code{mcols}).
}
\description{
Get sequential, potentially annotated regions of a fixed lengths
   (tiles) along chromosomes of a genome.
}
\details{
The last tile in each chromosome is dropped if it would be shorter
    than \code{tileWidth}. Generated tiles are unstranded (\code{*}) and
    therefore overlaps or searching for nearest neighbors are ignoring
    strands of annotations (\code{ignore.strand=TRUE}). If multiple nearest
    ranges are at the same distance from a tile, an arbitrary one is
    reported in "X.nearestName".
}
\examples{
library(GenomicRanges)

tss <- GRanges("chr1", IRanges(c(1, 10, 30), width = 1,
                               names = paste0("t", 1:3)))
blacklist <- GRanges("chr1", IRanges(20, width = 5))
getGenomicTiles(c(chr1 = 45, chr2 = 12), tileWidth = 10,
                hasOverlap = list(Blacklist = blacklist),
                fracOverlap = list(Blacklist = blacklist),
                numOverlap = list(TSS = tss),
                nearest = list(TSS = tss))

}
\seealso{
\code{\link[GenomicRanges]{tileGenome}}, \code{\link[GenomicRanges]{findOverlaps}}
    and \code{\link[GenomicRanges]{nearest}} in package \pkg{GenomicRanges} used by
    \code{getGenomicTiles} internally.
}
\author{
Michael Stadler
}
